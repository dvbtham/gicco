@model Gicco.Module.Catalog.ViewModels.ProductDetail
@using Gicco.Module.Core.Models
@using Gicco.Module.Core.Extensions

@inject IWorkContext WorkContext
@inject SignInManager<User> SignInManager
@{
    ViewBag.Title = Model.MetaTitle ?? Model.Name;
}

@section additionalMeta {
    <meta name="title" content="@ViewBag.Title" />
    <meta name="keywords" content="@Model.MetaKeywords" />
    <meta name="description" content="@Model.MetaDescription" />
}

<div class="columns-container">
    <div class="container" id="columns">
        <!-- breadcrumb -->
        <div class="breadcrumb clearfix">
            <a class="home" href="/" title="Return to Home">@Localizer["Home"]</a>
            <span class="navigation-pipe">&nbsp;</span>
            @if (Model.Categories.Any())
            {
                @await Component.InvokeAsync("CategoryBreadcrumb", new { categoryIds = Model.Categories.Select(x => x.Id) })
            }
            <span class="navigation_page">@ViewBag.Title</span>
        </div>
        <!-- ./breadcrumb -->
        <!-- row -->
        <div class="row">
            <!-- Left colunm -->
            <div class="column col-xs-12 col-sm-3" id="left_column">
                <!-- block best sellers -->
                <div class="block left-module">
                    <p class="title_block">@Localizer["Best Sellers"]</p>
                    <div class="block_content">
                        @await Component.InvokeAsync("BestSellerAside")
                    </div>
                </div>
                <!-- ./block best sellers  -->

            </div>
            <!-- ./left colunm -->
            <!-- Center colunm-->
            <div class="center_column col-xs-12 col-sm-9" id="center_column">
                <!-- Product -->
                <div id="product">
                    <div class="primary-box row">
                        <div class="pb-left-column col-xs-12 col-sm-6">
                            <!-- product-imge-->
                            <div class="product-image">
                                <div class="sp-wrap product-full">
                                    @foreach (var item in Model.Images)
                                    {
                                        <a href="@item.Url" data-image="@item.ThumbnailUrl" data-zoom-image="@item.ThumbnailUrl">
                                            <img id="product-zoom" src="@item.ThumbnailUrl" />
                                        </a>
                                    }
                                </div>
                            </div>
                            <!-- product-imge-->
                        </div>
                        <div class="pb-right-column col-xs-12 col-sm-6">
                            <h1 class="product-name">@Model.Name</h1>
                            <div class="product-comments">
                                <div class="product-star">
                                    <gicco-rating-star rating-avg="@Model.RatingAverage"></gicco-rating-star>
                                </div>
                                <div class="comments-advices">
                                    <a href="#">@Localizer["{0} reviews", Model.ReviewsCount]</a>
                                    <a href="#reviews"><i class="fa fa-pencil"></i> write a review</a>
                                </div>
                            </div>

                            <div class="info-orther">
                                <p>Sku: #@Model.Sku</p>
                                <p>@Localizer["Availability:"] @(Model.StockQuantity > 0 ? Html.Raw("<span class='label label-success'>" + Localizer["In stock"].Value + "</span>") : Html.Raw("<span class='label label-danger'>" + Localizer["Out of stock"].Value + "</span>"))</p>
                            </div>
                            <div class="product-desc">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                            @if (Model.HasVariation)
                            {
                                <form class="form-option">
                                    <p class="form-option-title">@Localizer["Available Options"]:</p>
                                    <div class="product-attrs">
                                        @foreach (var option in Model.AvailableOptions)
                                        {
                                            <div class="attributes">
                                                <div class="attribute-label">@Localizer[option.OptionName]:</div>
                                                <div class="attribute-list">
                                                    <ul class="list-color product-attr-options">
                                                        @foreach (var value in option.Values)
                                                        {
                                                            var shouldChecked = Model.Variations.First().Options.Any(x => x.Value == value);

                                                            if (Model.OptionDisplayValues[value].DisplayType == "color")
                                                            {
                                                                <li class="" title="@Localizer[value]" style="background:@Model.OptionDisplayValues[value].Value;">
                                                                    <input class="hidden" type="radio" value="@value" checked="@shouldChecked" name="@option.OptionName" />
                                                                    <a href="javascript:void(0);">@Model.OptionDisplayValues[value].Value</a>
                                                                </li>
                                                            }
                                                            else
                                                            {
                                                                <li class="" title="@Localizer[value]">
                                                                    <input class="hidden" type="radio" value="@value" checked="@shouldChecked" name="@option.OptionName" />
                                                                    <a class="show-text" href="javascript:void(0);">@Model.OptionDisplayValues[value].Value</a>
                                                                </li>
                                                            }
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </form>

                                foreach (var variant in Model.Variations)
                                {
                                    var hidden = variant != Model.Variations.First() ? "collapse" : "";

                                    <div class="product-variation @hidden" data-variation-name="@variant.NormalizedName">
                                        <div class="product-price bottom-price-box">
                                            @if (variant.IsCallForPricing)
                                            {
                                                <div class="product-price-group">
                                                    <span class="price">@Localizer["Call for pricing"]</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="product-price-group">
                                                    <span class="price">@variant.CalculatedProductPrice.Price.ToString("C")</span>
                                                    @if (variant.CalculatedProductPrice.PercentOfSaving > 0)
                                                    {
                                                        <span class="old-price">@(variant.CalculatedProductPrice.OldPrice.HasValue ? variant.CalculatedProductPrice.OldPrice.Value.ToString("C") : "")</span>
                                                        <span class="discount">- @variant.CalculatedProductPrice.PercentOfSaving.ToString()%</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                        @if (variant.StockTrackingIsEnabled && variant.StockQuantity <= 0)
                                        {
                                            <div class="out-of-stock">
                                                <span class="label label-danger">@Localizer["Out of stock"]</span>
                                            </div>
                                        }
                                        <div class="add-to-cart">
                                            <form class="inline">
                                                <input type="hidden" name="productId" value="@variant.Id" />
                                                <div class="product-quantity">
                                                    <button type="button" class="quantity-button" name="subtract" value="-">-</button>
                                                    <input type="text" class="quantity-field" readonly="readonly" name="qty" value="1">
                                                    <button type="button" class="quantity-button" name="add" value="+">+</button>
                                                </div>
                                                <button type="button" disabled="@(!variant.IsAllowToOrder || (variant.StockTrackingIsEnabled && variant.StockQuantity <= 0))" class="btn-add-cart">@Localizer["Add to cart"]</button>
                                                <div>
                                                    <ul class="mt-10">
                                                        <li class="wishlist-in">
                                                            <i class="fa fa-heart"></i>
                                                            <a href="#" class="add-to-wishlist">@Localizer["Add to Wishlist"]</a>
                                                        </li>
                                                        <li class="compare-in">
                                                            <i class="fa fa-exchange"></i>
                                                            <a href="#" class="add-to-comparison">@Localizer["Add to Compare"]</a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                }
                                <div class="product-variation-notavailable collapse">
                                    <span class="label label-danger">@Localizer["Not available"]</span>
                                </div>
                            }
                            else
                            {
                                if (Model.IsCallForPricing)
                                {
                                    <div class="product-price-group">
                                        <span class="price">@Localizer["Call for pricing"]</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="product-price-group">
                                        <span class="price">@Model.CalculatedProductPrice.Price.ToString("C")</span>
                                        @if (Model.CalculatedProductPrice.PercentOfSaving > 0)
                                        {
                                            <span class="old-price">@(Model.CalculatedProductPrice.OldPrice.HasValue ? Model.CalculatedProductPrice.OldPrice.Value.ToString("C") : "")</span>
                                            <span class="discount">- @Model.CalculatedProductPrice.PercentOfSaving.ToString()%</span>
                                        }
                                    </div>
                                }
                                if (Model.StockTrackingIsEnabled && Model.StockQuantity <= 0)
                                {
                                    <div class="out-of-stock">
                                        <span class="label label-danger">@Localizer["Out of stock"]</span>
                                    </div>
                                }
                                <div class="add-to-cart">
                                    <form class="inline">
                                        <input type="hidden" name="productId" value="@Model.Id" />
                                        <div class="product-quantity">
                                            <button type="button" class="quantity-button" name="subtract" value="-">-</button>
                                            <input type="text" class="quantity-field" readonly="readonly" name="qty" value="1">
                                            <button type="button" class="quantity-button" name="add" value="+">+</button>
                                        </div>
                                        <button type="button" disabled="@(!Model.IsAllowToOrder || (Model.StockTrackingIsEnabled && Model.StockQuantity <= 0))" class="btn-add-cart">@Localizer["Add to cart"]</button>
                                        <div>
                                            <ul class="mt-10">
                                                @if (SignInManager.IsSignedIn(User))
                                                {
                                                    <li class="wishlist-in">
                                                        <i class="fa fa-heart"></i>
                                                        <a class="add-to-wishlist" href="#">@Localizer["Add to Wishlist"]</a>
                                                    </li>
                                                }

                                                <li class="compare-in">
                                                    <i class="fa fa-exchange"></i>
                                                    <a href="#" class="add-to-comparison">@Localizer["Add to Compare"]</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                    <!-- tab product -->
                    <div class="product-tab">
                        <ul class="nav-tab">
                            <li class="active">
                                <a aria-expanded="false" data-toggle="tab" href="#product-detail">@Localizer["Product Details"]</a>
                            </li>
                            <li>
                                <a data-toggle="tab" href="#reviews">@Localizer["Reviews"]</a>
                            </li>
                        </ul>
                        <div class="tab-container">
                            <div id="product-detail" class="tab-panel product-description active">
                                @Html.Raw(Model.Description)
                                <div class="expand-detail hidden">@Localizer["Read more"]</div>
                            </div>
                            <div id="reviews" class="tab-panel">
                                <div class="product-comments-block-tab">
                                    <div>
                                        <h3 class="p-t-25 p-b-25">@Localizer["Customer reviews"]</h3>
                                        @await Component.InvokeAsync("Review", new { entityId = Model.Id, entityTypeId = "Product" })
                                    </div>
                                </div>
                            </div>
                            <div class="unexpand-detail hidden">@Localizer["Show less"]</div>
                        </div>
                        <!-- ./tab product -->
                        <!-- box product -->
                        @if (!string.IsNullOrWhiteSpace(Model.Specification))
                        {
                            <div>
                                <h3 class="p-t-25 p-b-25">@Localizer["Product specification"]</h3>
                                @Html.Raw(Model.Specification)
                            </div>
                        }
                        @if (Model.Attributes.Any())
                        {
                            <div>
                                <h3 class="p-t-25 p-b-25">@Localizer["Product specification"]</h3>
                                <table class="table">
                                    @foreach (var attribute in Model.Attributes)
                                    {
                                        <tr>
                                            <td>@attribute.Name</td>
                                            <td>@attribute.Value</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        }
                        @if (Model.RelatedProducts.Any())
                        {
                            <div class="page-product-box">
                                <h3 class="heading">@Localizer["Related Products"]</h3>
                                <ul class="product-list owl-carousel" data-dots="false" data-loop="true" data-nav="true" data-margin="30" data-autoplayTimeout="1000" data-autoplayHoverPause="true" data-responsive='{"0":{"items":1},"600":{"items":3},"1000":{"items":3}}'>
                                    @foreach (var product in Model.RelatedProducts)
                                    {
                                        @await Html.PartialAsync("_ProductThumbnail", product)
                                    }
                                </ul>
                            </div>
                        }
                        <!-- ./box product -->

                        @if (Model.CrossSellProducts.Any())
                        {
                            <div class="page-product-box">
                                <h3 class="heading">@Localizer["Crossell Products"]</h3>
                                <ul class="product-list owl-carousel" data-dots="false" data-loop="true" data-nav="true" data-margin="30" data-autoplayTimeout="1000" data-autoplayHoverPause="true" data-responsive='{"0":{"items":1},"600":{"items":3},"1000":{"items":3}}'>
                                    @foreach (var product in Model.CrossSellProducts)
                                    {
                                        @await Html.PartialAsync("_ProductThumbnail", product)
                                    }
                                </ul>
                            </div>
                        }
                        <div class="page-product-box">
                            <h3 class="heading">@Localizer["Customer comments"]</h3>
                            @await Component.InvokeAsync("Comment", new { entityId = Model.Id, entityTypeId = "Product" })
                        </div>
                        @await Component.InvokeAsync("ProductRecentlyViewed", new { productId = Model.Id })
                    </div>
                    <!-- Product -->
                </div>
                <!-- ./ Center colunm -->
            </div>
            <!-- ./row-->
        </div>
    </div>
</div>
@section scripts
    {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script gicco-append-version="true" src="~/themes/GiccoStore/js/jquery.elevatezoom.js"></script>
    <script gicco-append-version="true" src="~/themes/GiccoStore/js/product-detail.js"></script>

}
